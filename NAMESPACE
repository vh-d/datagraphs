# Generated by roxygen2: do not edit by hand

S3method("[",datagraph)
S3method(add_edges,datagraph)
S3method(add_vertices,datagraph)
S3method(all,equal.datagraph)
S3method(are_adjacent,datagraph)
S3method(are_adjacent,igraph)
S3method(as.data.table,datagraph)
S3method(as.data.table,datagraph_vertex)
S3method(as.datagraph,data.table)
S3method(as.datagraph,igraph)
S3method(as.igraph,datagraph)
S3method(as.list,datagraph)
S3method(as.list,datagraph_vertex)
S3method(check,datagraph)
S3method(detect_cycles,datagraph)
S3method(neighborhood,datagraph)
S3method(neighbors,datagraph)
S3method(neighbors_in,datagraph)
S3method(neighbors_in,datagraph_vertex)
S3method(neighbors_out,datagraph)
S3method(neighbors_out,datagraph_vertex)
S3method(print,datagraph)
S3method(print,datagraph_vertex)
S3method(remove_edges,datagraph)
S3method(remove_vertex,datagraph)
S3method(remove_vertices,datagraph)
S3method(union,datagraph)
export("%vin%")
export(add_edges)
export(add_vertex)
export(add_vertices)
export(are_adjacent)
export(as.datagraph)
export(check)
export(contains_vertex)
export(copy_graph)
export(copy_vertex)
export(datagraph)
export(datagraph_vertex)
export(detect_cycles)
export(neighborhood)
export(neighbors)
export(neighbors_in)
export(neighbors_out)
export(remove_edge.datagraph)
export(remove_edges)
export(remove_vertex)
export(remove_vertices)
export(union_list_of_graphs)
importFrom(data.table,as.data.table)
importFrom(igraph,as.igraph)
importFrom(igraph,union)
